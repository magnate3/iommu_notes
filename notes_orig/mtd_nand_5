==5== nand read/write flow and related buffer

-v0.1 2014.12.10 wangzhou draft

  different buffers in MTD-NAND system:

   struct mtd_oob_ops:  datebuf, oobbuf              --> mtd arch layer

   page data buffer       nand_chip->oob_poi buffer  --> nand arch layer
   (pointer from above layer)
	        
   DMA memory software buffer                        --> spec nand driver layer
   (there is a NAND controller buffer also)

   NAND controller hardware buffer                   --> hardware layer

    上面是linux内核中nand驱动框架，具体nand驱动，nand控制器硬件中的各种缓存。
最上面的datebuf,oobbuf存放page数据，oob区域中用户可以使用的数据。oobbuf中并不包含
BB区和ECC码。下面一层的page data buffer和datebuf中的一致，struct nand_chip中
的oob_poi buffer是上一层的oob数据，加上BB区数据和ECC码，其中ECC码可有驱动生成，
按照struct nand_ecclayout中的layout,填写到nand_chip->oob_poi buffer的指定位置。
一般的，nand控制器会用自带的DMA控制数据的读出和写出(nand flash), 再下一层的
DMA memory software buffer指的正是DMA对应的内存空间，若nand控制器用DMA控制数据
的读写, nand控制器驱动会把上一层的数据写道DMA指定的内存，然后启动DMA进行写操作，
写入nand flash, 读数据时, DMA会把数据先读到DMA指定的内存，然后再由驱动程序写入
上一层的buffer。nand控制器都有一个内部的buffer,写入nand flash的数据在先在此处
组织好，然后写入nand flash, 读出数据时也会过该buffer。一般的，用DMA读写数据时
数据也会过nand控制器内部的buffer。
    围绕各个数据buffer,学习nand驱动的读写流程会比较清晰一些。

In struct nand_ecc_ctrl, there are some callback functions which are used to
read and write NAND flash in different aspects. 

struct nand_ecc_ctrl ecc:
	int (*read_page_raw)(struct mtd_info *mtd, struct nand_chip *chip,
				uint8_t *buf, int oob_required, int page);
	int (*write_page_raw)(struct mtd_info *mtd, struct nand_chip *chip,
			const uint8_t *buf, int oob_required);
	int (*read_page)(struct mtd_info *mtd, struct nand_chip *chip,
			uint8_t *buf, int oob_required, int page);
	int (*read_subpage)(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t offs, uint32_t len, uint8_t *buf, int page);
	int (*write_subpage)(struct mtd_info *mtd, struct nand_chip *chip,
			uint32_t offset, uint32_t data_len,
			const uint8_t *data_buf, int oob_required);
	int (*write_page)(struct mtd_info *mtd, struct nand_chip *chip,
			const uint8_t *buf, int oob_required);
	int (*write_oob_raw)(struct mtd_info *mtd, struct nand_chip *chip,
			int page);
	int (*read_oob_raw)(struct mtd_info *mtd, struct nand_chip *chip,
			int page);
	int (*read_oob)(struct mtd_info *mtd, struct nand_chip *chip, int page);
	int (*write_oob)(struct mtd_info *mtd, struct nand_chip *chip,
			int page);

For example, read_page_raw means to read page data or/and OOB data without ECC.
One input parameter "oob_required" indicates whether we should read OOB data.

And, for read_page, it means to read page data or/and OOB data with ECC,
oob_required comes in the same way.

Here is default read_page_raw: 

static int nand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
			      uint8_t *buf, int oob_required, int page)
{
	chip->read_buf(mtd, buf, mtd->writesize);
	if (oob_required)
		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);

	return 0;
}

This function just copy the page data and OOB data in DMA memory to buf which
is passed by user and chip->oob_poi which is a buffer in nand_chip.

The steps of data flow are that firstly we use a DMA to read the data from
NAND flash to DMA memory in DDR, after that, we call nand_read_page_raw to
copy the data in DMA memory to user buffer and nand_chip buffer.

Here is default read_page_raw: 

static int nand_write_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
				const uint8_t *buf, int oob_required)
{
	chip->write_buf(mtd, buf, mtd->writesize);
	if (oob_required)
		chip->write_buf(mtd, chip->oob_poi, mtd->oobsize);

	return 0;
}

This function just copy page data in user buffer to DMA memory, copy
chip->oob_poi buffer(oob buffer in nand_chip) to DMA memory.

The steps of data flow are that firstly we copy the page data and oob data
using above function to DMA memory, after that, we call NAND controller DMA to
send data to NAND flash.

However here rises a problem. whether the hardware supports writing raw data
without ECC. Some kind of nand controller may not support writing raw data
without ECC in ECC mode. So we need to implement our own hisi_nand_write_page_raw
function to support this, and the implementation is hard.

Maybe in none ECC node, we can write the raw data with ECC, so we need to change
the ECC mode to none ECC mode.

