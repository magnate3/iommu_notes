qemu code analysis - qom
========================

-v0.1 2021.4.29 Sherlock init
-v0.2 2021.5.03 Sherlock draft finish 2,3

qemu里使用面向对象的模型来模拟相关的元素，可以想象这样的模拟是很合理的，比如，
用device描述一个设备的基类，pci_device可以继承device，然后vfio的pci设备又可以
继承pci_device，同时一个用纯用软件模拟的pci网络设备也可以继承pci_device。

本文描述这个基于面向对象的思路构建起来的qemux模型。分析基于qemu 5.2.92版本。

1. 对象的定义
-------------

 type_init(fn)
       /* 用宏定义了一个动态库的初始化函数, qemu编译出的库有？*/
   +-> module_init
    +-> register_module_init
      +-> e->init = fn

2. 对象的生成
-------------

 /* class的生成：qemu/softmmu/main.c */
 main
   +-> qemu_init
     +-> qemu_init_subsystems
           /* 根据TypeInfo创建class */
       +-> module_call_init(MODULE_INIT_QOM)
             /*
	      * init即为如上的fn, 这里的init只是把TypeInfo向qemu注册，类的
	      * 初始化还在后面
	      */     
         +-> ModuleEntry->init
	   ...?
	       /* 初始化class，哪里会调用？*/
	   +-> type_initialize
	       /* e.g. qemu/hw/misc/edu.c会调用到edu_class_init */
	     +-> edu_class_init
	           /* 得到PCIDeviceClass的指针是pci edu这个类的么？*/
	       +-> PCI_DEVICE_CLASS
     ...

     +-> qemu_opts_parse_noisily(qemu_find_opts("device"), ...)
     +-> qmp_x_exit_preconfig
       +-> qemu_create_cli_devices
             /* 遍历初始化之前扫描到的-device里的信息？*/
         +-> device_init_func
	   +-> qdev_device_add
	     +->qdev_new
	       +-> object_new
	       ...

 /* 具体device对象的生成 */

 根据命令行参数和class的定义，生成具体的实例。如上main函数里在object_new里生成
 一个具体实例。

3.interface是什么
-----------------

4.properties是什么
------------------

 link属性
 child属性

5. 一个例子
-----------
 
 这里写一个dma engine的qemu设备。
